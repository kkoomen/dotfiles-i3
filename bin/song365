#!/usr/bin/env bash
# Filename      : song365.sh
# Author        : Kim K
# Created       : Fri, 01 Jul 2016
# Last Modified : Thu, 21 Jul 2016


##############################
# Global variables
##############################

# The URL getting passed by the user to download (single track)
URL=""

# The URL getting passed by the user to download (album)
ALBUM_URL=""

# The destination where the files should be saved
DESTINATION=""

# The base url of song365.
# They change domain name a lot so we have to grab the domain name.
BASE_URL=""

##############################
# Functions
##############################
function usage {
  printf "Usage: ./song365.sh <option>\n\n"
  printf "Options:\n"
  printf "%s -h, --help \t\t\tDisplays this text\n"
  printf "%s -t, --track \t\t\tDownload a single track\n"
  printf "%s -a, --album \t\t\tDownload a full album\n"
  printf "%s -d, --destination\t\tThe destination where the files should be saved\n\n"

  printf "Examples:\n"
  printf "./song365.sh --track https://www.song365mp3.net/download/sia-chandelier-2906748.html\n"
  printf "./song365.sh --album https://www.song365mp3.net/album/sia-1000-forms-of-fear-264354.html -d ./sia/forms-of-fear/\n"
} # function usage

# arg1: $URL
function downloadTrack {
  # Get the HTML and save in tmp-file
  wget -q -O tmp "$1"

  CONTENT=$(cat tmp)
  TMP_FILENAME=$(mktemp)
  FILENAME="$(echo $TMP_FILENAME | cut -d '.' -f 2).mp3"
  URL_PATTERN="var\ hqurl\ =\ '(.*.mp3)'"
  FILENAME_PATTERN="Your\ will\ be\ download\ ([a-zA-Z0-9\ \-]+)"

  if [[ "$CONTENT" =~ $URL_PATTERN ]]; then
    # We found the download url
    DOWNLOAD_URL="${BASH_REMATCH[1]}"
  else
    printf "[!] No matching download URL found. Please try again.\n"
    exit
  fi

  if [[ "$CONTENT" =~ $FILENAME_PATTERN ]]; then
    # We found a filename
    FILENAME="$(echo ${BASH_REMATCH[1]} | xargs).mp3"
    echo "Downloading: $FILENAME"
  else
    echo "[!] No matching filename found."
    echo "[!] URL: $1 will be saved as: $FILENAME."
  fi

  # Save the mp3 file
  wget -q -O "$DESTINATION/$FILENAME" "$DOWNLOAD_URL"
} # function downloadTrack

# arg1: $ALBUM_URL
function downloadAlbum {
  # Get the HTML and save in tmp-file
  wget -q -O tmp "$1"

  # Gather all download URLs
  # and save them in tmp_album_links
  CONTENT=$(cat tmp)
  echo "$CONTENT" | grep -Po "<a\ href=\"(.*)\"\ class=\"download\">" | sed 's/.*href="\([^"]*\).*/\1/' > tmp_album_links

  # Download all urls we just gathered
  while read -r line; do
    downloadTrack "$BASE_URL/${line:1}"
  done < tmp_album_links

} # function downloadAlbum

# arg1: $URL | $ALBUM_URL
# arg2: type
function checkForValidURL {
  if [[ "$2" == "album" ]] && [[ "$1" != https://$BASE_URL/album* ]]; then
    printf "[!] Invalid Album URL specified\n"
    exit
  elif [[ "$2" == "single" ]] && [[ "$1" != https://$BASE_URL/download* ]]; then
    printf "[!] Invalid track URL specified\n"
    exit
  fi
} # checkForValidURL

##############################
# Command line arguments
##############################

# If no arguments: show the usage and terminate.
[[ $# -lt 1 ]] && usage && exit

while [[ $# -ge 1 ]]; do
  key="$1"

  case $key in
      -t|--track)
          URL="$2"
          shift;;
      -a|--album)
          ALBUM_URL="$2"
          shift;;
      -d|--destination)
          DESTINATION="$2"
          shift;;
      -h|--help)
          usage
          exit
          ;;
      *)
          printf "[!] Unknown option: $1\n"
          usage
          exit
          ;;
  esac
  shift # past argument or value
done

# We want users to specify an URL or an ALBUM URL. Not both.
if [[ ! -z "$URL" && ! -z "$ALBUM_URL" ]]; then
  printf "[!] Sorry. You can only specify a TRACK URL or an ALBUM URL. Not both.\n"
  exit
fi


##############################
# Main downloading process
##############################

# strip trailing slashes
while [[ "${DESTINATION: -1}" == '/' ]]; do
  DESTINATION="${DESTINATION:0:-1}"
done

# Prompt the user to create the dest if it doesn't exist.
# Else just take the current working directory.
if [[ ! -z "$DESTINATION" && ! -d "$DESTINATION" ]]; then
  QUESTION="[!] You specified a directory that doesn't exist. Want to create it? [Y/n] "
  read -p "$QUESTION" answer
  while true; do
    case $answer in
      [yY]*) mkdir -p "$DESTINATION"
      break;;

      [nN]*) DESTINATION=$(pwd)
      break;;

      *) exit;;
    esac
  done
elif [[ -z "$DESTINATION" ]]; then
  DESTINATION=$(pwd)
fi

# Check if we have to download a single track or an album
if [[ ! -z "$URL" ]]; then
  BASE_URL=$(echo "$URL" | cut -d '/' -f 3)
  checkForValidURL "$URL" "single"
  downloadTrack "$URL"
elif [[ ! -z "$ALBUM_URL" ]]; then
  BASE_URL=$(echo "$ALBUM_URL" | cut -d '/' -f 3)
  checkForValidURL "$ALBUM_URL" "album"
  downloadAlbum "$ALBUM_URL"
fi

# Clean stuff up
printf "%s-----\n[!] Cleaning temporarily files\n"
rm -f tmp tmp_album_links "$TMP_FILENAME"
printf "Done\n"
